/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { MeetingRoom } from "./MeetingRoom";
import { MeetingRoomCountArgs } from "./MeetingRoomCountArgs";
import { MeetingRoomFindManyArgs } from "./MeetingRoomFindManyArgs";
import { MeetingRoomFindUniqueArgs } from "./MeetingRoomFindUniqueArgs";
import { CreateMeetingRoomArgs } from "./CreateMeetingRoomArgs";
import { UpdateMeetingRoomArgs } from "./UpdateMeetingRoomArgs";
import { DeleteMeetingRoomArgs } from "./DeleteMeetingRoomArgs";
import { MeetingFindManyArgs } from "../../meeting/base/MeetingFindManyArgs";
import { Meeting } from "../../meeting/base/Meeting";
import { MeetingRoomService } from "../meetingRoom.service";
@graphql.Resolver(() => MeetingRoom)
export class MeetingRoomResolverBase {
  constructor(protected readonly service: MeetingRoomService) {}

  async _meetingRoomsMeta(
    @graphql.Args() args: MeetingRoomCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [MeetingRoom])
  async meetingRooms(
    @graphql.Args() args: MeetingRoomFindManyArgs
  ): Promise<MeetingRoom[]> {
    return this.service.meetingRooms(args);
  }

  @graphql.Query(() => MeetingRoom, { nullable: true })
  async meetingRoom(
    @graphql.Args() args: MeetingRoomFindUniqueArgs
  ): Promise<MeetingRoom | null> {
    const result = await this.service.meetingRoom(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => MeetingRoom)
  async createMeetingRoom(
    @graphql.Args() args: CreateMeetingRoomArgs
  ): Promise<MeetingRoom> {
    return await this.service.createMeetingRoom({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => MeetingRoom)
  async updateMeetingRoom(
    @graphql.Args() args: UpdateMeetingRoomArgs
  ): Promise<MeetingRoom | null> {
    try {
      return await this.service.updateMeetingRoom({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => MeetingRoom)
  async deleteMeetingRoom(
    @graphql.Args() args: DeleteMeetingRoomArgs
  ): Promise<MeetingRoom | null> {
    try {
      return await this.service.deleteMeetingRoom(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Meeting], { name: "meetings" })
  async findMeetings(
    @graphql.Parent() parent: MeetingRoom,
    @graphql.Args() args: MeetingFindManyArgs
  ): Promise<Meeting[]> {
    const results = await this.service.findMeetings(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
