/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  MeetingRoom as PrismaMeetingRoom,
  Meeting as PrismaMeeting,
} from "@prisma/client";

export class MeetingRoomServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.MeetingRoomCountArgs, "select">
  ): Promise<number> {
    return this.prisma.meetingRoom.count(args);
  }

  async meetingRooms<T extends Prisma.MeetingRoomFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.MeetingRoomFindManyArgs>
  ): Promise<PrismaMeetingRoom[]> {
    return this.prisma.meetingRoom.findMany<Prisma.MeetingRoomFindManyArgs>(
      args
    );
  }
  async meetingRoom<T extends Prisma.MeetingRoomFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.MeetingRoomFindUniqueArgs>
  ): Promise<PrismaMeetingRoom | null> {
    return this.prisma.meetingRoom.findUnique(args);
  }
  async createMeetingRoom<T extends Prisma.MeetingRoomCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.MeetingRoomCreateArgs>
  ): Promise<PrismaMeetingRoom> {
    return this.prisma.meetingRoom.create<T>(args);
  }
  async updateMeetingRoom<T extends Prisma.MeetingRoomUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.MeetingRoomUpdateArgs>
  ): Promise<PrismaMeetingRoom> {
    return this.prisma.meetingRoom.update<T>(args);
  }
  async deleteMeetingRoom<T extends Prisma.MeetingRoomDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.MeetingRoomDeleteArgs>
  ): Promise<PrismaMeetingRoom> {
    return this.prisma.meetingRoom.delete(args);
  }

  async findMeetings(
    parentId: string,
    args: Prisma.MeetingFindManyArgs
  ): Promise<PrismaMeeting[]> {
    return this.prisma.meetingRoom
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .meetings(args);
  }
}
